# MCP 도구 사용 규칙

## 개요
이 규칙은 한투 퀀트 프로젝트에서 MCP(Model Context Protocol) 도구들을 효과적으로 활용하기 위한 가이드라인입니다.

## 필수 MCP 도구 사용 시나리오

### 1. Sequential Thinking MCP 도구 사용 규칙

#### 언제 사용해야 하는가?
- **복잡한 다단계 작업**: 3단계 이상의 연속적인 분석이나 구현이 필요한 경우
- **아키텍처 설계**: 시스템 설계, 모듈 구조 계획, 의존성 분석 등
- **문제 해결**: 복잡한 버그 분석, 성능 최적화, 알고리즘 개선
- **요구사항 분석**: 사용자 요구사항을 세부 구현 계획으로 분해
- **통합 작업**: 여러 컴포넌트 간의 상호작용 설계
- **리팩토링 계획**: 기존 코드 구조 개선 전략 수립

#### 구체적 사용 예시
```
- 새로운 AI 모델 통합 계획 수립
- 백테스트 시스템 성능 최적화 전략
- Phase 간 데이터 흐름 설계
- 복잡한 알고리즘 구현 전략
- 멀티모듈 리팩토링 계획
- 데이터베이스 스키마 설계
```

#### 사용 방법
1. **문제 정의**: 해결해야 할 복잡한 문제를 명확히 서술
2. **단계별 분해**: sequential thinking을 통해 논리적 단계로 분해
3. **대안 검토**: 각 단계에서 가능한 대안들을 검토
4. **최적 솔루션**: 최종적으로 최적의 구현 방법 결정
5. **실행 계획**: 구체적인 실행 계획 수립

### 2. Context7 MCP 도구 사용 규칙

#### 언제 사용해야 하는가?
- **최신 라이브러리 정보 필요**: 사용 중인 라이브러리의 최신 문법, API 변경사항
- **모범 사례 확인**: 특정 기술의 권장 사용 패턴
- **호환성 검증**: 라이브러리 간 호환성, 버전 의존성 확인
- **새로운 기술 도입**: 프로젝트에 새로운 라이브러리나 프레임워크 도입 시
- **에러 해결**: 특정 라이브러리 관련 에러의 최신 해결 방법
- **성능 최적화**: 라이브러리별 성능 최적화 기법

#### 주요 대상 라이브러리
```
Python 핵심 라이브러리:
- pandas: 데이터 처리 및 분석
- numpy: 수치 계산
- scikit-learn: 머신러닝 모델
- matplotlib/seaborn: 데이터 시각화
- asyncio: 비동기 프로그래밍
- SQLAlchemy: 데이터베이스 ORM

금융/트레이딩 라이브러리:
- TA-Lib: 기술적 분석 지표
- yfinance: 주가 데이터 수집
- zipline: 백테스트 프레임워크

웹/API 라이브러리:
- FastAPI: API 서버 구축
- requests: HTTP 클라이언트
- websocket: 실시간 통신
```

#### 사용 방법
1. **라이브러리 식별**: 사용할 라이브러리 이름 정확히 파악
2. **Context7 조회**: resolve-library-id로 라이브러리 ID 확인
3. **문서 조회**: get-library-docs로 최신 문서 및 사용법 확인
4. **적용**: 확인된 최신 문법과 모범 사례를 코드에 적용
5. **검증**: 적용된 코드가 정상 작동하는지 테스트

## 도구 사용 우선순위

### High Priority (필수 사용)
- **복잡한 시스템 설계** → Sequential Thinking 필수
- **최신 라이브러리 문법** → Context7 필수
- **다단계 알고리즘 구현** → Sequential Thinking 필수
- **라이브러리 업그레이드** → Context7 필수

### Medium Priority (권장 사용)
- **중간 복잡도 구현** → Sequential Thinking 권장
- **일반적인 라이브러리 사용** → Context7 권장

### Low Priority (선택 사용)
- **단순한 CRUD 작업** → 도구 사용 선택사항
- **기존 검증된 코드 수정** → 도구 사용 선택사항

## 프로젝트별 적용 지침

### 한투 퀀트 프로젝트 특화 규칙

#### Sequential Thinking 필수 사용 시나리오
1. **AI 학습 시스템 구현** (Phase 4)
   - 피처 엔지니어링 설계
   - 모델 통합 아키텍처
   - 백테스트 자동화 워크플로우

2. **시장 모니터링 시스템** (Phase 5)
   - 실시간 데이터 처리 설계
   - 이상 감지 알고리즘
   - 알림 시스템 아키텍처

3. **시스템 통합** (Phase 6)
   - 전체 시스템 아키텍처
   - 성능 최적화 전략
   - 배포 전략 수립

#### Context7 필수 사용 시나리오
1. **금융 데이터 처리**
   - pandas 최신 금융 데이터 처리 기법
   - numpy 수치 계산 최적화
   - scikit-learn 최신 ML 모델 API

2. **API 개발**
   - FastAPI 최신 문법 및 모범 사례
   - requests 비동기 HTTP 클라이언트
   - websocket 실시간 통신 구현

3. **백테스트 시스템**
   - 백테스트 라이브러리 최신 사용법
   - 성능 측정 도구 활용법
   - 데이터 시각화 최신 기법

## 품질 보증 규칙

### Sequential Thinking 품질 체크리스트
- [ ] 문제가 명확히 정의되었는가?
- [ ] 각 단계가 논리적으로 연결되는가?
- [ ] 대안이 충분히 검토되었는가?
- [ ] 최종 솔루션이 실행 가능한가?
- [ ] 리스크가 식별되고 대응책이 있는가?

### Context7 품질 체크리스트
- [ ] 최신 라이브러리 버전이 확인되었는가?
- [ ] 공식 문서의 권장사항을 따르는가?
- [ ] 호환성 이슈가 확인되었는가?
- [ ] 보안 권장사항이 적용되었는가?
- [ ] 성능 최적화 기법이 고려되었는가?

## 예외 상황 처리

### Sequential Thinking 사용이 어려운 경우
- **시간 제약**: 간단한 구현이 시급한 경우, 나중에 리팩토링 계획 수립
- **정보 부족**: 충분한 요구사항이 없는 경우, 프로토타입 먼저 구현 후 분석

### Context7 접근이 어려운 경우
- **네트워크 이슈**: 로컬 문서나 캐시된 정보 활용
- **라이브러리 미지원**: 공식 GitHub이나 문서 직접 확인

## 성과 측정 및 개선

### 측정 지표
- **코드 품질**: 버그 발생률, 코드 리뷰 피드백
- **개발 효율성**: 구현 시간, 리팩토링 필요성
- **유지보수성**: 코드 이해도, 수정 용이성
- **기술 부채**: 임시 해결책 비율, 문서화 수준

### 지속적 개선
- **월간 리뷰**: MCP 도구 사용 효과 분석
- **모범 사례 공유**: 성공적인 도구 활용 사례 문서화
- **규칙 업데이트**: 프로젝트 진행에 따른 규칙 개선

## 결론

MCP 도구의 체계적 활용을 통해 한투 퀀트 프로젝트의 코드 품질, 개발 효율성, 기술적 정확성을 향상시킵니다. 
복잡한 작업에는 Sequential Thinking, 최신 기술 정보에는 Context7을 필수적으로 활용하여 
세계 수준의 퀀트 트레이딩 시스템을 구축합니다.
description:
globs:
alwaysApply: false
---
