---
description: 한투 퀀트 프로젝트의 현재 상황과 규칙을 정의합니다.
globs: 
alwaysApply: true
---

# 한투 퀀트 프로젝트 컨텍스트 규칙

## 필수 참조 파일

다음 파일들은 프로젝트 작업 시 필수적으로 참조해야 합니다:

- @PROJECT_SUMMARY.md - 프로젝트 구조와 주요 기능 요약
- @ROADMAP.md - 개발 계획 및 로드맵
- @.ai/context/project_context.md - AI 협업을 위한 프로젝트 컨텍스트
- @.env.example - 환경 변수 설정 예시 (민감 정보 제외)

## 작업 유형별 참조 파일

### API 개발 작업
- @core/config/settings.py - 기본 설정
- @core/config/api_config.py - API 관련 설정
- @core/api/kis_api.py - 한국투자증권 API 클라이언트
- @core/api/rest_client.py - REST API 클라이언트
- @core/api/websocket_client.py - WebSocket 클라이언트

### 전략 개발 작업
- @core/strategy/momentum.py - 모멘텀 전략 구현
- @hantu_backtest/strategies/momentum.py - 백테스트용 모멘텀 전략
- @hantu_common/indicators/base.py - 기술지표 기본 클래스

### 트레이딩 엔진 작업
- @core/trading/auto_trader.py - 자동 매매 클래스
- @core/realtime/processor.py - 실시간 데이터 처리
- @main.py - 메인 실행 파일

### 백테스트 작업
- @hantu_backtest/core/engine.py - 백테스트 엔진
- @hantu_backtest/strategies/base.py - 백테스트 전략 기본 클래스

## 문서 동기화 자동화 시스템 ⚡

### 자동화 시스템 구성
TODO 완료 시 관련 문서들이 자동으로 업데이트되는 시스템을 구축했습니다.

#### 핵심 구성 요소
1. **자동화 스크립트**: `scripts/doc_sync_automation.py`
   - TODO 완료 상태 자동 감지
   - 관련 문서 패턴 매칭 및 업데이트
   - 히스토리 기록 자동 생성

2. **Git Hook 시스템**: `.githooks/pre-commit`
   - 커밋 시 자동 문서 동기화 실행
   - 변경된 파일 자동 스테이징
   - 동기화 상태 실시간 피드백

3. **설치 스크립트**: `scripts/setup_doc_automation.sh`
   - 한 번의 실행으로 완전 설정
   - Git hooks 자동 설치
   - 필요한 디렉토리 생성

#### 자동 업데이트 대상
- `PROJECT_SUMMARY.md` - 프로젝트 현재 상태
- `ROADMAP.md` - 개발 계획 변경사항
- `STATUS_REPORT.md` - 성과 지표 업데이트
- `.cursor/rules/project-status.mdc` - 현재 상황 규칙
- `.cursor/rules/implementation_checklist.md` - 체크리스트
- `.ai/history/` - 작업 히스토리 기록

#### 사용 방법
```bash
# 설치 (한 번만 실행)
bash scripts/setup_doc_automation.sh

# 이후 자동 실행됨
# - TODO 완료 시 자동 감지
# - Git 커밋 시 자동 동기화
# - 수동 실행: python3 scripts/doc_sync_automation.py
```

## 업데이트 규칙

### 필수 업데이트 파일
다음 파일들은 관련 변경 시 자동으로 업데이트됩니다:

1. **코드 변경 시** (자동):
   - @PROJECT_SUMMARY.md - 구조나 기능이 변경된 경우
   - @ROADMAP.md - 개발 계획이 변경된 경우
   - @.ai/context/project_context.md - 프로젝트 컨텍스트 변경 시

2. **API 관련 변경 시** (수동):
   - @.env.example - 새로운 환경 변수가 추가된 경우
   - @core/config/api_config.py - API 설정 변경 시

3. **전략 관련 변경 시** (수동):
   - @.ai/context/file_references.json - 참조 파일 목록 업데이트

### 자동화된 메타데이터 업데이트
모든 TODO 완료 후 다음 메타데이터가 자동으로 업데이트됩니다:

1. **작업 히스토리** (자동):
   - @.ai/history/ 디렉토리에 새 작업 기록 추가

2. **규칙 파일** (자동):
   - @.cursor/rules/project-status.mdc - 현재 상황 업데이트
   - @.cursor/rules/implementation_checklist.md - 체크리스트 업데이트

3. **워크플로우 및 템플릿** (수동):
   - 새로운 작업 유형 추가 시 @.ai/workflows/ 디렉토리에 워크플로우 추가
   - 기존 워크플로우 개선 시 관련 파일 업데이트

## 기본 개발 원칙

1. **코드 변경 작업 전**:
   - 관련 파일들을 먼저 읽고 이해
   - 적절한 워크플로우 파일 참조
   - 보안 관련 지침 확인

2. **코드 변경 후**:
   - 테스트 실행 확인
   - 문서 및 메타데이터 업데이트
   - 변경 내역 요약 제공

3. **보안 관련 원칙**:
   - API 키, 토큰 등 민감 정보는 절대 하드코딩하지 않음
   - 항상 .env 파일 사용
   - 민감 정보가 로그에 기록되지 않도록 함

4. **트레이딩 전략 개발 원칙**:
   - 백테스트로 검증 후 실제 트레이딩에 적용
   - 리스크 관리 로직 반드시 포함
   - 파라미터 최적화 시 과적합 주의

## 프로젝트 특화 가이드

1. **환경 구분**:
   - 모의투자(virtual)와 실제투자(prod) 환경 명확히 구분
   - 각 환경별 설정 및 토큰 관리 분리

2. **API 호출 주의사항**:
   - 한국투자증권 API 호출 제한 준수
   - 토큰 갱신 로직 오류 처리 필수
   - WebSocket 연결 안정성 확보

3. **데이터 관리**:
   - 주가 데이터는 data/stock/ 디렉토리에 저장
   - 토큰 정보는 data/token/ 디렉토리에 저장
   - 민감 데이터는 .gitignore에 포함되어 있는지 확인

4. **로깅 전략**:
   - 중요 작업은 반드시 로깅
   - 민감 정보는 마스킹 처리
   - core/utils/log_utils.py의 필터 활용

## AI 협업 지침

1. **작업 시작 시**:
   먼저 기본 컨텍스트 파일을 읽고 시작
   ```
   .ai/context/project_context.md 파일을 읽고 프로젝트를 이해해주세요.
   ```

2. **작업 유형별 참조**:
   작업 유형에 맞는 파일 참조 요청
   ```
   .ai/context/file_references.json에서 [작업유형] 관련 파일들을 확인해주세요.
   ```

3. **워크플로우 기반 작업**:
   명확한 워크플로우 지정
   ```
   .ai/workflows/[워크플로우명].md에 따라 작업을 진행해주세요.
   ```

4. **히스토리 관리**:
   작업 완료 후 히스토리 기록
   ```
   방금 완료한 작업을 .ai/history/ 디렉토리에 기록해주세요.
   ```

이 규칙을 준수하여 프로젝트를 일관되고 효율적으로 개발합니다.

   방금 완료한 작업을 .ai/history/ 디렉토리에 기록해주세요.
   ```

이 규칙을 준수하여 프로젝트를 일관되고 효율적으로 개발합니다.

## 중요 주의사항 ⚠️

### 절대 변경 금지 영역
- **YAML Front Matter**: 모든 .mdc 파일 상단의 `---` 사이 설정 영역
- **alwaysApply: true**: 규칙 적용 설정 (변경 시 규칙 적용 안됨)
- **globs**: 파일 적용 범위 설정
- **description**: 규칙 파일 설명

### AI 편집 시 주의사항
- 규칙 파일 편집 시 YAML front matter는 절대 변경하지 않음
- 내용 업데이트 시 `# 한투 퀀트 프로젝트 현재 상황 규칙` 이후 부분만 수정

   방금 완료한 작업을 .ai/history/ 디렉토리에 기록해주세요.
   ```

이 규칙을 준수하여 프로젝트를 일관되고 효율적으로 개발합니다.
